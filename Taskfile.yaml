version: '3'
vars:
  CVER_DIR: "."

tasks:

  build-api:
    # args:
    #   - name: registry
    #     desc: Description of arg1 (optional)
    #     required: false
    cmds:
      - cp -r {{.CVER_DIR}}/src {{.CVER_DIR}}/docker/api/
      - cp -r {{.CVER_DIR}}/tests {{.CVER_DIR}}/docker/api/
      - rm -rf {{.CVER_DIR}}/docker/api/src/build
      - rm -rf {{.CVER_DIR}}/docker/api/src/dist
      - rm -rf {{.CVER_DIR}}/docker/api/src/cver.egg-info
      - |
        if [ -z ${CVER_API_TAG} ]; then
          CVER_API_TAG="dev"
        fi
        CLI_ARGS="{{ .CLI_ARGS }}"
        if [ -z ${CLI_ARGS} ]; then
          TARGET="tests"
        else
          TARGET=$CLI_ARGS
        fi
        echo "Building Target: ${TARGET}"
        DOCKER_REGISTRY="harbor.squid-ink.us/cver-docker-hub"
        # DOCKER_REGISTRY="docker.io"
        docker build \
          -t cver/cver-api:${CVER_API_TAG} \
          --build-arg CVER_BUILD="${CVER_API_TAG}" \
          --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY} \
          --target ${TARGET} \
          {{.CVER_DIR}}/docker/api
      - rm -rf {{.CVER_DIR}}/docker/api/src
      - rm -rf {{.CVER_DIR}}/docker/api/tests
      - echo "Completed build cver/cver-api"
    silent: false

  build-engine:
    cmds:
      - cp -r {{.CVER_DIR}}/src {{.CVER_DIR}}/docker/engine/
      - cp -r {{.CVER_DIR}}/tests {{.CVER_DIR}}/docker/engine/
      - rm -rf {{.CVER_DIR}}/docker/engine/src/build
      - rm -rf {{.CVER_DIR}}/docker/engine/src/dist
      - rm -rf {{.CVER_DIR}}/docker/engine/src/cver.egg-info
      - |
        if [ -z ${CVER_ENGINE_TAG} ]; then
          CVER_ENGINE_TAG="dev"
        fi
        DOCKER_REGISTRY="harbor.squid-ink.us/cver-docker-hub"
        # DOCKER_REGISTRY="docker.io"
        docker build \
          -t cver/cver-engine:${CVER_ENGINE_TAG} \
          --build-arg CVER_BUILD="${CVER_ENGINE_TAG}" \
          --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY} \
          --target dev \
          {{.CVER_DIR}}/docker/engine
      - rm -rf {{.CVER_DIR}}/docker/engine/src
      - rm -rf {{.CVER_DIR}}/docker/engine/tests
      - echo "Completed build cver/cver-engine"
    silent: false

  build-ingest:
    cmds:
      - cp -r {{.CVER_DIR}}/src {{.CVER_DIR}}/docker/ingest/
      - cp -r {{.CVER_DIR}}/tests {{.CVER_DIR}}/docker/ingest/
      - rm -rf {{.CVER_DIR}}/docker/ingest/src/build
      - rm -rf {{.CVER_DIR}}/docker/ingest/src/dist
      - rm -rf {{.CVER_DIR}}/docker/ingest/src/cver.egg-info
      - |
        if [ -z ${CVER_INGEST_TAG} ]; then
          CVER_INGEST_TAG="dev"
        fi
        CLI_ARGS="{{ .CLI_ARGS }}"
        if [ -z ${CLI_ARGS} ]; then
          TARGET="tests"
        else
          TARGET=$CLI_ARGS
        fi
        DOCKER_REGISTRY="harbor.squid-ink.us/cver-docker-hub"
        # DOCKER_REGISTRY="docker.io"
        echo "Building Target: ${TARGET}"
        docker build \
          -t cver/cver-ingest:${CVER_INGEST_TAG} \
          --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY} \
          --target ${TARGET} \
          {{.CVER_DIR}}/docker/ingest
      - rm -rf {{.CVER_DIR}}/docker/ingest/src
      - rm -rf {{.CVER_DIR}}/docker/ingest/tests
      - echo "Completed build cver/cver-ingest"
    silent: false

  build-test:
    cmds:
      - |
        VERSION_FILE="src/cver/api/version.py"
        VERSION=$(grep -o 'version = "[^"]*"' src/cver/api/version.py | cut -d '"' -f 2)
        cp src/requirements.txt docker/test/requirements-src.txt
        cp tests/requirements.txt docker/test/requirements-test.txt
        echo "Building Target: ${TARGET}"
        docker build \
          -t cver/cver-test:${VERSION} \
          --build-arg DOCKER_REGISTRY="harbor.squid-ink.us/cver-docker-hub" \
          {{.CVER_DIR}}/docker/test
        rm docker/test/requirements-src.txt
        rm docker/test/requirements-test.txt
      - echo "Completed build cver/cver-test"
    silent: false

  dev-run-api:
    cmds:
      - |
        docker rm -f cver-api
        docker run --name="cver-api" -d \
          -v {{.CVER_DIR}}/src:/app \
          -v {{.CVER_DIR}}/tests:/tests \
          -v {{.CVER_DIR}}/examples:/examples \
          -v ~/.kube:/root/.kube \
          -p 80:80 \
          -e CVER_DB_HOST="mysql" \
          -e CVER_DB_USER="root" \
          -e CVER_DB_PASS="${CVER_DB_PASS}" \
          -e CVER_TEST_CLIENT_ID="${CVER_TEST_CLIENT_ID}" \
          -e CVER_TEST_API_KEY="${CVER_TEST_API_KEY}" \
          -e CVER_CLIENT_ID="${CVER_TEST_CLIENT_ID}" \
          -e CVER_API_KEY="${CVER_TEST_API_KEY}" \
          -e CVER_API_URL="http://localhost/" \
          -e CVER_SECRET_KEY="${CVER_SECRET_KEY}" \
          -e CVER_TEST="true" \
          -e CVER_JWT_EXPIRE_MINUTES=1440 \
          cver/cver-api:dev \
          tail -f /dev/null
      - docker network connect cver cver-api
      - echo "Success"
    silent: false

  dev-run-ingest:
    cmds:
      - |
        docker rm -f cver-ingest
        docker run --name="cver-ingest" -d \
          -v {{.CVER_DIR}}/src:/app \
          -v {{.CVER_DIR}}/tests:/tests \
          -e CVER_CLIENT_ID="${CVER_TEST_CLIENT_ID}" \
          -e CVER_API_KEY="${CVER_TEST_API_KEY}" \
          -e CVER_API_URL="http://localhost/" \
          -e CVER_TEST="true" \
          cver/cver-ingest:dev \
          tail -f /dev/null
      - docker network connect cver cver-ingest
      - echo "Success"
    silent: false

  dev-cp-api:
    cmds:
      - |
        POD=$(kubectl get pods -n cver-dev  -l app.kubernetes.io/instance=cver-api-dev --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo $POD
        kubectl cp -n cver-dev {{ .CVER_DIR }}/src/cver/ ${POD}:/app/ -c cver-api
        kubectl exec -n cver-dev -it ${POD} -c cver-api -- /bin/cver-build
      - echo "Copied and Built!"
    silent: True

  dev-cp-api-tests:
    cmds:
      - |
        POD=$(kubectl get pods -n cver-dev -l app.kubernetes.io/instance=cver-api-dev --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        kubectl cp -n cver-dev {{ .CVER_DIR }}/tests/ ${POD}:/
        kubectl exec -n cver-dev -it ${POD} -c cver-api -- cver-build-tests
      - echo "Copied and Built Cver Tests"
    silent: True

  dev-cp-engine:
    cmds:
      - |
        POD=$(kubectl get pods -n cver-dev -l app.kubernetes.io/instance=cver-engine-dev --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        kubectl cp -n cver-dev {{ .CVER_DIR }}/src/cver/ ${POD}:/app/
        kubectl exec -n cver-dev -it ${POD} -- cver-build
      - echo "Copied and Built!"
    silent: True

  dev-cp-ingest:
    cmds:
      - |
        POD=$(kubectl get pods -n cver-dev -l app.kubernetes.io/instance=cver-ingest-dev --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        kubectl cp -n cver-dev {{ .CVER_DIR }}/src/cver/ ${POD}:/app/
        kubectl exec -n cver-dev -it ${POD} -- cver-build
      - echo "Copied and Built!"
    silent: True

  dev-cp-all:
    cmds:
      - |
        POD_API=$(kubectl get pods  -n cver-dev -l app.kubernetes.io/instance=cver-api-dev --field-selector=status.phase=Running --no-headers | cut -d' ' -f1)
        kubectl cp  -n cver-dev {{ .CVER_DIR }}/src/cver/ ${POD_API}:/app/ -c cver-api
        kubectl exec -it ${POD_API} -c cver-api -- cver-build
        echo "Copied and Built Api"
      # - |
      #   POD_ENGINE=$(kubectl get pods -l app.kubernetes.io/instance=cver-engine-dev --no-headers | cut -d' ' -f1)
      #   kubectl cp {{ .CVER_DIR }}/src/cver/ ${POD_ENGINE}:/app/
      #   kubectl exec -it ${POD_ENGINE} -- cver-build
      #   echo "Copied and Built Engine"
      - |
        POD_API=$(kubectl get pods -l app.kubernetes.io/instance=cver-api-dev --no-headers | cut -d' ' -f1)
        kubectl exec -it ${POD_API} -c cver-api -- cver-test-unit

  dev-cp-engine-tests:
    cmds:
      - |
        POD=$(kubectl get pods -l app.kubernetes.io/instance=cver-engine-dev --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        kubectl cp {{ .CVER_DIR }}/tests/ ${POD}:/
        # kubectl exec -it ${POD} -- cver-build-tests
      - echo "Copied and Built!"
    silent: True

  dev-cp-test:
    cmds:
      - |
        POD=$(kubectl get pods -n cver-dev  -l app.kubernetes.io/instance=cver-test-dev --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo $POD
        kubectl cp -n cver-dev {{ .CVER_DIR }}/src ${POD}:/current/
        kubectl cp -n cver-dev {{ .CVER_DIR }}/tests ${POD}:/
        kubectl exec -n cver-dev -it ${POD} -- /bin/cver-test-unit
      - echo "Copied and Built!"
    silent: True

  dev-exec-api:
    cmds:
      - |
        POD=$(kubectl get pods -n cver-dev -l app.kubernetes.io/instance=cver-api-dev --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Logging into to pod: ${POD}"
        kubectl exec -n cver-dev -it ${POD} -c cver-api -- bash
    silent: True

  dev-exec-engine:
    cmds:
      - |
        POD=$(kubectl get pods -n cver-dev  -l app.kubernetes.io/instance=cver-engine-dev --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Logging into to pod: ${POD}"
        kubectl exec -n cver-dev -it ${POD} -- bash
    silent: True

  dev-exec-ingest:
    cmds:
      - |
        POD=$(kubectl get pods -n cver-dev -l app.kubernetes.io/instance=cver-ingest-dev --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Logging into to pod: ${POD}"
        kubectl exec -n cver-dev -it ${POD} -- bash
    silent: True

  dev-exec-test:
    cmds:
      - |
        POD=$(kubectl get pods -n cver-dev -l app.kubernetes.io/instance=cver-test-dev --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        echo "Logging into to pod: ${POD}"
        kubectl exec -n cver-dev -it ${POD} -- bash
    silent: True

  dev-helm-api:
    cmds:
      - |
        cd helm/cver-api
        DEPLOYED_AT=$(date +"%Y-%m-%d %T")
        helm upgrade --install \
            cver-api-dev \
            ./ \
            --namespace=cver-dev \
            -f values.yaml \
            -f values-quigley-dev.yaml \
            --set "app.deployedAt=${DEPLOYED_AT}"
    slient: True

  dev-helm-api-dead:
    cmds:
      - |
        cd helm/cver-api
        DEPLOYED_AT=$(date +"%Y-%m-%d %T")
        helm upgrade --install \
            cver-api-dev \
            ./ \
            --namespace=cver-dev \
            -f values.yaml \
            -f values-quigley-dev.yaml \
            --set "app.deployedAt=${DEPLOYED_AT}" \
            --set app.runApionStart=false
    slient: True

  dev-helm-engine:
    cmds:
      - |
        cd helm/cver-engine
        DEPLOYED_AT=$(date +"%Y-%m-%d %T")
        helm upgrade --install \
            cver-engine-dev \
            ./ \
            --namespace=cver-dev \
            -f values.yaml \
            -f values-quigley-dev.yaml \
            --set "app.deployedAt=${DEPLOYED_AT}"
    silent: True

  dev-helm-ingest:
    cmds:
      - |
        cd helm/cver-ingest
        DEPLOYED_AT=$(date +"%Y-%m-%d %T")
        helm upgrade --install \
            cver-ingest-dev \
            ./ \
            --namespace=cver-dev \
            -f values.yaml \
            -f values-quigley-dev.yaml \
            --set "app.deployedAt=${DEPLOYED_AT}"
    silent: True

  dev-helm-test:
    cmds:
      - |
        cd helm/cver-test
        DEPLOYED_AT=$(date +"%Y-%m-%d %T")
        helm upgrade --install \
            cver-test-dev \
            ./ \
            --namespace=cver-dev \
            -f values.yaml \
            -f values-quigley-dev.yaml \
            --set "app.deployedAt=${DEPLOYED_AT}"
    silent: True

  dev-rebuild-k8s:
    cmds:
      - task: dev-cp-api
      - task: dev-cp-api-tests
      - task: dev-cp-engine
      - task: dev-cp-ingest
      # - task: dev-cp-test
      - |
        # Destroy the Existing database and run migrations
        POD=$(kubectl get pods -n cver-dev -l app.kubernetes.io/instance=cver-api-dev --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        kubectl exec -n cver-dev -it ${POD} -- cver-db-destroy
        kubectl exec -n cver-dev -it ${POD} -- python3 /app/cver/migrate/migrate.py
      - |
        # Run Ingestion
        POD=$(kubectl get pods -n cver-dev -l app.kubernetes.io/instance=cver-ingest-dev --no-headers --field-selector=status.phase=Running | cut -d' ' -f1)
        kubectl exec -n cver-dev -it ${POD} -- python3 /app/cver/ingest/ingest.py
      - |
        # Run Update Options
        python3 examples/cver-client/update_options_registry.py

  dev-logs-api:
    cmds:
      - |
        POD=$(kubectl get pods -l app.kubernetes.io/instance=cver-api-dev --no-headers | cut -d' ' -f1)
        stern ${POD}

  dev-pods:
    cmds:
      - kubectl get pods -n cver-dev -w

  test-pods:
    cmds:
      - kubectl get pods -n cver-test -w

  stage-pods:
    cmds:
      - kubectl get pods -n cver-stage -w

  dev-mysql:
    cmds:
      - mysql -h 127.0.0.1 -u root --password=$MYSQL_PWD

  cver-build:
    cmds:
      - |
        rm -rf /opt/homebrew/lib/python3.11/site-packages/cver*
        cd src
        rm -rf /opt/homebrew/lib/python3.11/site-packages/cver-*
        python3 setup.py build
        python3 setup.py install

  pre-commit:
    cmds: 
      - |
        echo "Pre Commit"
        cd ./src
        echo "src/"
        flake8 cver --config=flake8 --count --show-source --statistics
      - |
        echo "tests/"
        flake8 tests/ --config=tests/flake8 --count --show-source --statistics
    silent: true

  k8s-exec-stage:
    cmds:
      - |
        POD=$(kubectl get pods -l app.kubernetes.io/name=stage --no-headers | cut -d' ' -f1)
        echo "Logging into $POD"
        kubectl exec -it -c cver-api ${POD} -- bash
    silent: true

  k8s-pf-stage:
    cmds:
      - |
        kubectl port-forward svc/cver-api-stage 5003:80
    silent: true
  
  cicd-decode-k8s-config:
    cmds:
      - |
        echo "Argument: {{ .CLI_ARGS }}"
        mkdir ~/.kube
        echo "{{ .CLI_ARGS }}" | base64 -d > ~/.kube/config.yaml
        export KUBECONFIG=~/.kube/config.yaml
        chmod 600 ~/.kube/config.yaml

  cicd-version:
    cmds:
      - |
        VERSION_FILE="src/cver/api/version.py"
        VERSION=$(grep -o 'version = "[^"]*"' src/cver/api/version.py | cut -d '"' -f 2)
        echo "$VERSION"
    silent: true
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cver-api.fullname" . }}
  labels:
    {{- include "cver-api.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "cver-api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cver-api.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # serviceAccountName: {{ include "cver-api.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.app.runMigrations }}
      initContainers:
      - name: cver-migrations
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["python3", "/app/cver/migrate/migrate.py"]
        env:
          - name: CVER_ENV
            value: "{{ .Values.app.envName }}"
          - name: CVER_DB_HOST
            value: "{{ .Values.app.dbHost }}"
          - name: CVER_DB_PORT
            value: "{{ .Values.app.dbPort }}"
          - name: CVER_DB_NAME
            value: "{{ .Values.app.dbName }}"
          - name: CVER_DB_USER
            value: "{{ .Values.app.dbUser }}"
          - name: CVER_DB_PASS
            valueFrom:
              secretKeyRef:
                key: mysql-password
                name: cver-mysql
          - name: CVER_SECRET
            valueFrom:
              secretKeyRef:
                key: mysql-password
                name: cver-mysql
          {{- if .Values.test.test }}
          - name: CVER_TEST_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: client-id
                name: cver-test-creds
          - name: CVER_TEST_API_KEY
            valueFrom:
              secretKeyRef:
                key: api-key
                name: cver-test-creds
          - name: CVER_TEST
            value: "true"
          {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.app.debug }}
          command: ["tail", "-f", "/dev/null"]
          {{- end }}
          env:
            - name: CVER_ENV
              value: "{{ .Values.app.envName }}"
            - name: CVER_DB_HOST
              value: "{{ .Values.app.dbHost }}"
            - name: CVER_DB_PORT
              value: "{{ .Values.app.dbPort }}"
            - name: CVER_DB_NAME
              value: "{{ .Values.app.dbName }}"
            - name: CVER_DB_USER
              value: "{{ .Values.app.dbUser }}"
            - name: CVER_DB_PASS
              valueFrom:
                secretKeyRef:
                  key: mysql-password
                  name: cver-secrets-{{ .Values.app.envName }}
            - name: CVER_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: cver-secret-key
                  name: cver-secrets-{{ .Values.app.envName }}
            - name: CVER_JWT_EXPIRE_MINUTES
              value: "{{ .Values.app.jwtExpireMinutes }}"
            {{- if .Values.test.test }}
            - name: CVER_TEST_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  key: client-id
                  name: cver-test-creds
            - name: CVER_TEST_API_KEY
              valueFrom:
                secretKeyRef:
                  key: api-key
                  name: cver-test-creds
            - name: CVER_TEST
              value: "true"
            {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
              initialDelaySeconds: 60
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
